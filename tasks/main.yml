---
- name: Ensure cron is available
  ansible.builtin.package:
    name: cron
    state: present

- name: Install socat if needed
  ansible.builtin.package:
    name: socat
    state: present
  loop: "{{ acme_sh_certificates }}"
  when:
    - acme_sh_standalone
    - acme_sh_certificates and not item.webroot | default(false)

- name: Download acme.sh script if needed.
  ansible.builtin.get_url:
    dest: /tmp/acme.sh
    mode: "0755"
    url: https://raw.githubusercontent.com/acmesh-official/acme.sh/master/acme.sh
  when:
    - not ansible_check_mode    # (Bug ansible/ansible#65687)

- name: Install acme.sh if needed
  ansible.builtin.command:
    argv:
      - ./acme.sh
      - --install
      - --email
      - "{{ acme_sh_account_email }}"
    creates: "~/acme.sh"
    chdir: /tmp
  become_user: "{{ acme_sh_become_user }}"
  when:
    - not ansible_check_mode

- name: Enable acme.sh logging
  ansible.builtin.replace:
    path: ~/.acme.sh/account.conf
    regexp: '^#LOG_FILE=(.*)$'
    replace: 'LOG_FILE=\1'
  become_user: "{{ acme_sh_become_user }}"
  when: acme_sh_log

- name: Enable acme.sh auto-upgrade if needed
  ansible.builtin.lineinfile:
    path: ~/.acme.sh/account.conf
    regexp: "AUTO_UPGRADE="
    line: "AUTO_UPGRADE='1'"
  become_user: "{{ acme_sh_become_user }}"
  when: acme_sh_autoupgrade

- name: Disable acme.sh auto-upgrade if needed
  ansible.builtin.lineinfile:
    path: "~/.acme.sh/account.conf"
    regexp: "AUTO_UPGRADE="
    line: "AUTO_UPGRADE='0'"
  become_user: "{{ acme_sh_become_user }}"
  when: not acme_sh_autoupgrade

- name: Issue certificates
  ansible.builtin.command: >-
    ~/.acme.sh/acme.sh
    --issue -d {{ item.domains | join(" -d ") }}
    --days {{ acme_sh_renew_days }}
    {{ "--server " + item.server | default(acme_sh_server) if item.server | default(acme_sh_server) else "" }}
    {{ "--dns " + '"' + item.dns | default(acme_sh_dns) + '"' if item.dns | default(acme_sh_dns) else "" }}
    {{ "--dnssleep " + (item.dns_sleep | default(acme_sh_sleep) | string) if item.dns | default(acme_sh_dns) else "" }}
    {{ "--standalone" if acme_sh_standalone else "" }}
    {{ "--webroot " + acme_sh_webroot | to_json if item.webroot | default(false) else "" }}
    {{ "--force" if item.force | default(false) | to_json else "" }}
    {{ "--debug" if item.debug | default(acme_sh_debug) else "" }}
    {{ "--pre-hook " + '"' + item.pre_hook + '"' if item.pre_hook is defined else "" }}
    {{ "--post-hook " + '"' + item.post_hook + '"' if item.post_hook is defined else "" }}
    {{ "--renew-hook " + '"' + item.renew_hook + '"' if item.renew_hook is defined else "" }}
    {{ item.extra_issue if item.extra_issue is defined else "" }}
  environment: "{{ item.dns_api_keys | default(acme_sh_dns_api_keys) }}"
  loop: "{{ acme_sh_certificates }}"
  when:
    - acme_sh_certificates and item.domains is defined and item.domains
  become_user: "{{ acme_sh_become_user }}"
  register: issue_result
  changed_when: issue_result.rc == 0 and "Cert success" in issue_result.stdout
  failed_when: issue_result.rc != 0 and "Domains not changed" not in issue_result.stdout

- name: Install certificates
  ansible.builtin.command: >-
    ~/.acme.sh/acme.sh
    --install-cert -d {{ item.domains | first }}
    --key-file {{ item.install_key_to }}
    --fullchain-file {{ item.install_cert_to }}
    {{ "--reloadcmd " + '"' + item.reload_cmd + '"' if item.reload_cmd is defined else "" }}
    {{ "--debug" if item.debug | default(acme_sh_debug) else "" }}
    {{ item.extra_install if item.extra_install is defined else "" }}
  loop: "{{ acme_sh_certificates }}"
  when:
    - acme_sh_certificates and item.domains is defined and item.domains
    - item.install_cert_to is defined
    - item.install_key_to is defined
  become_user: "{{ acme_sh_become_user }}"
  register: install_result
  failed_when: install_result.rc != 0 and "Reload error for" not in install_result.stderr
  changed_when: install_result.rc == 0 and "Installing full chain" in install_result.stdout
